import{a as m,c as k,b as e,f as o,e as s,d as a,w as t,r as d,o as v}from"./app-BdEi8R7_.js";const u="/assets/address-6c7l1dsa.png",f={},b={class:"vp-file-tree"},y={class:"code-block-title","data-title":"your-project/.gitignore"},x={class:"code-block-title-bar"},A={class:"title"},G={class:"code-block-title","data-title":"your-project/HelloWorld.py"},B={class:"code-block-title-bar"},C={class:"title"},D={class:"code-block-title","data-title":".gitignore"},w={class:"code-block-title-bar"},z={class:"title"},H={class:"hint-container note"};function V(E,i){const r=d("Annotation"),l=d("VPIcon"),n=d("FileTreeNode"),h=d("VPCodeTree"),c=d("VPCollapseItem"),g=d("VPCollapse"),p=d("VPLink");return v(),k("div",null,[i[26]||(i[26]=e("div",{class:"hint-container note"},[e("p",{class:"hint-container-title"},"注"),e("p",null,"尽管你可以使用例如 vscode 中极为方便的插件而不是直接输入 Git 命令，但知道 Git 的基础命令及操作方式是必要的。"),e("p",null,"通过本文，你将可以学到如何使用 Git 进行基本的版本管理。")],-1)),i[27]||(i[27]=e("h2",{id:"初始化-git-仓库",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#初始化-git-仓库"},[e("span",null,"初始化 Git 仓库")])],-1)),e("p",null,[i[1]||(i[1]=a("你可以在终端",-1)),s(r,{label:"terminal",total:1},{"item-0":t(()=>[...i[0]||(i[0]=[e("p",null,"在 Windows 中一般使用 cmd 应用；",-1),e("p",null,"在 MacOS 中使用 terminal（终端） 应用；",-1),e("p",null,"或更常用的，我们一般使用 vscode 中的终端。",-1)])]),_:1}),i[2]||(i[2]=a("中执行",-1))]),i[28]||(i[28]=o('<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此命令会在本地创建一个 Git 仓库（你执行命令时所在目录下会生成一个 .git 隐藏文件夹），当然，你不必在意这个文件夹（正如它之所以是隐藏的那样），Git 会为你打理好一切。</p><p>此时你的文件目录大致如下：</p>',3)),e("div",b,[s(n,{expanded:"",type:"folder",filename:"your-project",level:0},{icon:t(()=>[s(l,{provider:"iconify",name:"vscode-icons:default-folder"})]),default:t(()=>[s(n,{type:"folder",diff:"add",filename:".git",level:1},{icon:t(()=>[s(l,{provider:"iconify",name:"vscode-icons:folder-type-git"})]),default:t(()=>[s(n,{type:"file",filename:"…",level:2})]),_:1}),s(n,{type:"file",filename:"your-files-like-python.py",level:1},{icon:t(()=>[s(l,{provider:"iconify",name:"vscode-icons:file-type-python"})]),_:1}),s(n,{type:"file",filename:"...",level:1})]),_:1})]),i[29]||(i[29]=o('<p>如果你是在 vscode 中初始化 Git 仓库，左侧资源管理器中的文件应全部变为绿色。</p><h3 id="细节阐释" tabindex="-1"><a class="header-anchor" href="#细节阐释"><span>细节阐释</span></a></h3><p>为避免产生误解，我将对于 Git 仓库作出部分解释：</p><ol><li><p>本地文件夹 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">≠</mo></mrow><annotation encoding="application/x-tex">\\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span></span></span></span> Git 仓库，只有你要求 Git 添加进 Git 仓库的文件才会被添加至本地仓库（下文会讲）；</p></li><li><p>我们有时称仓库为 <mark>版本库</mark>，因为 Git 本质上是一个版本管理工具。一般情况下，Git 仓库中会保存所有仓库现有文件以及所有历史更改。</p></li><li><p>每次提交更改，都将在 Git 仓库中创建一个新的版本、更新文件、记录更新。</p></li></ol><h2 id="为本地仓库添加文件" tabindex="-1"><a class="header-anchor" href="#为本地仓库添加文件"><span>为本地仓库添加文件</span></a></h2><p>你可以通过</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> your-file-like-python.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',7)),e("p",null,[i[4]||(i[4]=a("来将 ",-1)),i[5]||(i[5]=e("code",null,"your-file-like-python.py",-1)),i[6]||(i[6]=a(" 文件添加到 Git 文件暂存区",-1)),s(r,{label:"stage",total:1},{"item-0":t(()=>[...i[3]||(i[3]=[e("p",null,"暂存区是一个临时存储区域，它包含了即将被提交到版本库中的文件",-1)])]),_:1}),i[7]||(i[7]=a("。",-1))]),i[30]||(i[30]=o('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>更准确的说，是将 <mark>文件变动</mark> 添加到暂存区，当仓库中已有但你更新了某个文件也可以使用该命令添加变动。</p><p>甚至，当你删除了某个文件，仍然是使用该命令添加变动（即使该文件已经不在目录中）。</p></div><p>你可以多次使用 git add 命令来将文件添加到暂存区，直到你准备好提交所有更改。</p><p>此外，你也可以通过</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>来一键添加所有文件。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>有时我们并不需要添加所有文件到 Git 仓库，例如部分缓存文件、编译产物等。</p></div><h3 id="让-git-自动忽略部分文件" tabindex="-1"><a class="header-anchor" href="#让-git-自动忽略部分文件"><span>让 Git 自动忽略部分文件</span></a></h3><p>创建一个 <code>.gitignore</code> 文件如下图：</p>',8)),s(h,{"entry-file":"your-project/.gitignore"},{"file-tree":t(()=>[s(n,{filename:"your-project",level:1,type:"folder",expanded:""},{icon:t(()=>[s(l,{provider:"iconify",name:"vscode-icons:default-folder"})]),default:t(()=>[s(n,{filename:".gitignore",level:2,type:"file",expanded:"",filepath:"your-project/.gitignore"},{icon:t(()=>[s(l,{provider:"iconify",name:"vscode-icons:file-type-git"})]),_:1}),s(n,{filename:"HelloWorld.py",level:2,type:"file",expanded:"",filepath:"your-project/HelloWorld.py"},{icon:t(()=>[s(l,{provider:"iconify",name:"vscode-icons:file-type-python"})]),_:1})]),_:1})]),default:t(()=>[e("div",y,[e("div",x,[e("span",A,[s(l,{provider:"iconify",name:"vscode-icons:file-type-git"}),i[8]||(i[8]=a("your-project/.gitignore",-1))])]),i[9]||(i[9]=e("div",{class:"language-yaml line-numbers-mode","data-highlighter":"shiki","data-ext":"yaml",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[e("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[e("code",{class:"language-yaml"},[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"node_modules")]),a(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},".cache")]),a(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"*"),e("span",{style:{"--shiki-light":"#B07D48","--shiki-dark":"#BD976A"}},".log")])])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1))]),e("div",G,[e("div",B,[e("span",C,[s(l,{provider:"iconify",name:"vscode-icons:file-type-python"}),i[10]||(i[10]=a("your-project/HelloWorld.py",-1))])]),i[11]||(i[11]=e("div",{class:"language-python line-numbers-mode","data-highlighter":"shiki","data-ext":"python",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[e("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[e("code",{class:"language-python"},[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#998418","--shiki-dark":"#B8A965"}},"print"),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"("),e("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),e("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"Hello World!"),e("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),e("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},")")])])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1))])]),_:1}),i[31]||(i[31]=o("<p>如果按照上图配置 Git 将会自动忽略所有 node_modules 和 .cache 文件夹及其内部所有文件和所有 .log 文件。</p><p>在 .gitigore 中 <code>*</code> 为通配符，意为匹配任意，<code>*.log</code> 意为不管文件叫什么，只要后缀为 <code>.log</code> 就忽略。</p><p>思考一下，如果我现在想忽略 migrations 下所有文件，唯独保留 <code>__init__.py</code> 怎么办？</p><p>提示：在 .gitignore 中， <code>!</code> 前缀意为不忽略某个文件。</p>",4)),s(g,null,{default:t(()=>[s(c,{index:0},{title:t(()=>[...i[12]||(i[12]=[a("答案",-1)])]),default:t(()=>[e("div",D,[e("div",w,[e("span",z,[s(l,{provider:"iconify",name:"vscode-icons:file-type-git"}),i[13]||(i[13]=a(".gitignore",-1))])]),i[14]||(i[14]=e("div",{class:"language-yaml line-numbers-mode","data-highlighter":"shiki","data-ext":"yaml",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[e("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[e("code",{class:"language-yaml"},[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"migrations/*")]),a(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"!__init__.py")])])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1))])]),_:1})]),_:1}),i[32]||(i[32]=e("p",null,[a("好了，现在你可以放心地使用 "),e("code",null,"git add ."),a(" 来添加所有文件到暂存区了。")],-1)),i[33]||(i[33]=e("h2",{id:"提交更改",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#提交更改"},[e("span",null,"提交更改")])],-1)),e("p",null,[i[16]||(i[16]=a("你可以使用 ",-1)),i[17]||(i[17]=e("code",null,"git commit",-1)),i[18]||(i[18]=a(" 命令将文件从暂存区提交到 Git 仓库中，并创建一个新的版本",-1)),s(r,{label:"version",total:1},{"item-0":t(()=>[...i[15]||(i[15]=[e("p",null,"Git 本质上是一个版本管理工具，一般情况下，Git 仓库中会保存所有仓库现有文件以及所有历史更改。",-1)])]),_:1}),i[19]||(i[19]=a("。",-1))]),i[34]||(i[34]=o('<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Whatever you want to note.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，<code>-m</code> 后面的引号中的内容是你本次提交的消息（你可以理解为备注），通常用于标记本次修改的主要内容。如果你不加 <code>-m</code> 而直接执行 <code>git commit</code>，你将被引导使用 vim 来编辑消息，请不要因为看到陌生页面而惊慌。</p><div class="hint-container note"><p class="hint-container-title">注</p><p>更为规范的，我们会统一备注的格式，例如：<code>feat(theme): add something.</code> 意为为主题模块新增了xxx功能。</p><p>规范化有助于版本管理与协作。但这是后话了，目前你只需知道如何提交更改即可。</p></div><h2 id="git-远程仓库" tabindex="-1"><a class="header-anchor" href="#git-远程仓库"><span>Git 远程仓库</span></a></h2><p>显而易见的，你需要一种更为优雅的方式与别人协作，而不是互相传文件。</p><p>Git 远程仓库便解决了这个问题：它可以简单理解为在云端的 Git 仓库，协作者可以通过访问该仓库完成同步修改、文件、版本等。</p><p>我们一般使用 GitHub 作为远程仓库，当然，你也可以使用其它具有远程仓库功能的网站，甚至自建一个远程仓库。</p><h3 id="更新远程仓库" tabindex="-1"><a class="header-anchor" href="#更新远程仓库"><span>更新远程仓库</span></a></h3>',8)),e("div",H,[i[22]||(i[22]=e("p",{class:"hint-container-title"},"注",-1)),e("p",null,[i[21]||(i[21]=a("在 GitHub 简介章节，我们已经介绍了",-1)),s(p,{href:"./github-overview.md#%E5%88%9B%E5%BB%BA-github-%E4%BB%93%E5%BA%93"},{default:t(()=>[...i[20]||(i[20]=[a("如何创建一个 GitHub 仓库",-1)])]),_:1})])]),i[35]||(i[35]=o('<div class="vp-steps"><ol><li><p>首先，你需要连接你的远程仓库：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> remote</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> add</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> 你的仓库地址</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中，你的仓库地址为下图中所示</p><figure><img src="'+u+'" alt="address" tabindex="0" loading="lazy" width="2560" height="1528"><figcaption>address</figcaption></figure></li><li><p>向远程仓库推送更改</p><p>在命令行中执行</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -u</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> main</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>推送本地仓库的变动，包括 <mark>文件、修改记录、版本</mark> 。</p><p>远程仓库记录内容与本地仓库一致。</p></li></ol></div><h3 id="更新本地仓库" tabindex="-1"><a class="header-anchor" href="#更新本地仓库"><span>更新本地仓库</span></a></h3><p>与上文相对应的，更新本地仓库即为</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pull</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同样的，这将拉取 <mark>所有变动</mark> 。</p><h3 id="解决冲突" tabindex="-1"><a class="header-anchor" href="#解决冲突"><span>解决冲突</span></a></h3><p>机智的你可能就想到了</p><div class="vp-chat"><div class="vp-chat-header"><p class="vp-chat-title">机智的你</p></div><div class="vp-chat-content"><div class="vp-chat-date"><span>2025-10-21 23:57:40</span></div><div class="vp-chat-message user"><div class="vp-chat-message-body"><p class="vp-chat-username">机智的你</p><div class="message-content"><p>哎？万一有协作者推送了更改，我没有及时更新本地仓库导致与远程仓库冲突了怎么办？</p></div></div></div><div class="vp-chat-message self"><div class="vp-chat-message-body"><div class="message-content"><p>别担心！Git 作为一个强大的版本管理工具，怎么会没想到这点呢？ 你可以使用 merge/rebase 大法！！</p></div></div></div></div></div><p>Git 为解决本地仓库与远程仓库的冲突，推出了 <code>merge</code> 和 <code>rebase</code> 命令。</p><p>可惜，想要在命令行中理解这些并不容易，也不太必要。</p>',10)),e("p",null,[i[24]||(i[24]=a("而在 vscode 中使用 merge 是极为容易且直观的，故请前往 ",-1)),s(p,{href:"./git-with-vscode.md#%E5%86%B2%E7%AA%81%E7%AE%A1%E7%90%86"},{default:t(()=>[...i[23]||(i[23]=[a("在 VSCode 中使用 Git 的冲突管理部分",-1)])]),_:1}),i[25]||(i[25]=a(" 查看。",-1))]),i[36]||(i[36]=e("hr",null,null,-1)),i[37]||(i[37]=e("p",null,"恭喜你，你已经学会了 Git 的基本用法！",-1)),i[38]||(i[38]=e("p",null,"接下来，你将学习如何使用 GitHub 以及如何在 VSCode 中使用 Git。",-1))])}const N=m(f,[["render",V]]),P=JSON.parse('{"path":"/git/4fll3zro/","title":"Git 的基础操作","lang":"zh-CN","frontmatter":{"title":"Git 的基础操作","createTime":"2025/10/21 20:14:08","permalink":"/git/4fll3zro/","description":"注 尽管你可以使用例如 vscode 中极为方便的插件而不是直接输入 Git 命令，但知道 Git 的基础命令及操作方式是必要的。 通过本文，你将可以学到如何使用 Git 进行基本的版本管理。 初始化 Git 仓库 你可以在终端中执行 此命令会在本地创建一个 Git 仓库（你执行命令时所在目录下会生成一个 .git 隐藏文件夹），当然，你不必在意这个文...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git 的基础操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-22T09:02:45.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.yxzl.dev/git/4fll3zro/"}],["meta",{"property":"og:site_name","content":"技术文档"}],["meta",{"property":"og:title","content":"Git 的基础操作"}],["meta",{"property":"og:description","content":"注 尽管你可以使用例如 vscode 中极为方便的插件而不是直接输入 Git 命令，但知道 Git 的基础命令及操作方式是必要的。 通过本文，你将可以学到如何使用 Git 进行基本的版本管理。 初始化 Git 仓库 你可以在终端中执行 此命令会在本地创建一个 Git 仓库（你执行命令时所在目录下会生成一个 .git 隐藏文件夹），当然，你不必在意这个文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-22T09:02:45.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-22T09:02:45.000Z"}]]},"readingTime":{"minutes":5.33,"words":1600},"git":{"createdTime":1761063945000,"updatedTime":1761123765000,"contributors":[{"name":"Honahec","username":"Honahec","email":"honahec@gmail.com","commits":4,"avatar":"https://avatars.githubusercontent.com/Honahec?v=4","url":"https://github.com/Honahec"},{"name":"yxzlwz","username":"yxzlwz","email":"yxzlwz@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/yxzlwz?v=4","url":"https://github.com/yxzlwz"},{"name":"HAO CHEN","username":"","email":"honahec@gmail.com","commits":1,"avatar":"https://gravatar.com/avatar/a15c600945d4dd7fca6886a7d1b0b46b71581c611d0a88a1682c422e8a61133e?d=retro"}],"changelog":[{"hash":"9f1d5c64448f99f37ec23b168a55e7afd72c653e","time":1761123765000,"email":"honahec@gmail.com","author":"HAO CHEN","message":"update(docs)"},{"hash":"649a6ff8c2a46d51d286e1ec34475280ef4e28b4","time":1761110918000,"email":"yxzlwz@gmail.com","author":"yxzlwz","message":"[update] add image paste rule &#x26; add cli"},{"hash":"38398eb3e736d5a73d556bced2d7e94e0765be1b","time":1761108173000,"email":"honahec@gmail.com","author":"Honahec","message":"update(docs): separate git-installation and git-basecs"},{"hash":"e6154836945616c0de8c426c6a6f0d7f01f2cd03","time":1761107642000,"email":"honahec@gmail.com","author":"Honahec","message":"fix(docs): to install git, we need git..."},{"hash":"d6cc15f4268c4622f6f6866a0fc8693a684316c8","time":1761064932000,"email":"honahec@gmail.com","author":"Honahec","message":"update(docs)"},{"hash":"e4c7b300cad3fb4280faea65c61b5549391f38f4","time":1761063945000,"email":"honahec@gmail.com","author":"Honahec","message":"update(docs): git basics"}]},"autoDesc":true,"filePathRelative":"git/git-basics.md","headers":[]}');export{N as comp,P as data};
