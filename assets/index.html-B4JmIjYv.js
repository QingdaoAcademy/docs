import{a as t,c as e,d as a,o}from"./app-CW-xHGg1.js";const n="/assets/image-DuVpWP_x.png",p="/assets/image-1-Bini7TzY.png",s="/assets/image-2-BRve1d1w.png",r="/assets/image-9-CE-MP4Ik.png",c="/assets/image-4-2Fcxyl6K.png",d="/assets/image-8-CtVEXdVD.png",g="/assets/image-7-DoeV3pRa.png",l="/assets/image-3-BmItd1Qh.png",h="/assets/209974e43752989497b302810a724330-Ds2qL5dg.png",m="/assets/image-5-c6B3gr4K.png",f="/assets/image-6-DmlFkFwI.png",x={};function u(z,i){return o(),e("div",null,[...i[0]||(i[0]=[a('<p>在绝大多数情况下，我们并不会直接在命令行工具中使用 Git。本节我们将以 VS Code 为例，来演示如何使用图形化界面来进行 Git 管理。</p><p>本节内容假定你已经掌握了 VS Code 的基本使用方法。如果没有，请先阅读 xxxx。</p><h2 id="初始化存储库-init" tabindex="-1"><a class="header-anchor" href="#初始化存储库-init"><span>初始化存储库（init）</span></a></h2><p>使用 VS Code 打开一个文件夹，并按照如图所示打开“源代码管理”菜单。如果你没有在该文件夹中创建过 Git 仓库，你可以通过如图方式操作。</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy" width="2560" height="1528"><figcaption></figcaption></figure><h2 id="暂存和提交" tabindex="-1"><a class="header-anchor" href="#暂存和提交"><span>暂存和提交</span></a></h2><p>你可以点击如图所示的“+”来暂存（add）所有当前被修改的文件。你也可以点击每个文件后面的“+”（图中未展示）来暂存单个文件。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy" width="1250" height="933"><figcaption></figcaption></figure><p>当完成暂存操作后，你可以在文本框中输入提交信息，然后提交（commit）。</p><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy" width="1059" height="882"><figcaption></figcaption></figure><h2 id="撤销提交" tabindex="-1"><a class="header-anchor" href="#撤销提交"><span>撤销提交</span></a></h2><p>点击“更改”右侧的三个点，即可按下图所示找到“撤销上次提交”选项。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy" width="1448" height="1132"><figcaption></figcaption></figure><p>请注意：<mark>你只应该对没有同步到远程的提交执行此操作</mark>。</p><h2 id="查看某个文件的变更" tabindex="-1"><a class="header-anchor" href="#查看某个文件的变更"><span>查看某个文件的变更</span></a></h2><p>在源代码管理页面中，点击某个被更改的文件，即可查看本次更改的详细信息。</p><ul><li>“-”或红色表示这一行内容被删除</li><li>“+”或绿色表示这一行内容被添加</li><li>特别说明的是，Git 的记录精确到行。这意味着当修改一行代码的部分内容时，在 Git 中表现为这一行被删除后重新添加。</li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy" width="2560" height="1528"><figcaption></figcaption></figure><h2 id="查看目录变更情况" tabindex="-1"><a class="header-anchor" href="#查看目录变更情况"><span>查看目录变更情况</span></a></h2><p>你可以在“资源管理器”和“源代码管理”菜单中看到文件（或文件夹）后面带有如下四种标记：</p><ul><li><code>U</code>：表示当前文件没有被 Git 追踪（常见于还没有提交过的新文件）</li><li><code>A</code>：表示创建了新文件</li><li><code>M</code>：表示当前文件被修改（增加或删除部分内容）</li><li><code>D</code>：表示当前文件被删除</li></ul><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy" width="544" height="434"><figcaption></figcaption></figure><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy" width="532" height="542"><figcaption></figcaption></figure><h2 id="远程管理" tabindex="-1"><a class="header-anchor" href="#远程管理"><span>远程管理</span></a></h2><h3 id="添加远程仓库" tabindex="-1"><a class="header-anchor" href="#添加远程仓库"><span>添加远程仓库</span></a></h3><p>如果你还没有为仓库配置远程地址，可以通过如下方式操作：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy" width="2122" height="1325"><figcaption></figcaption></figure><p>点击后，页面顶部中间会弹出输入框，你需要：</p><ol><li>输入你的远程仓库地址（以 <code>git@</code> 开头），然后回车</li><li>在第二个输入框中，输入 <code>origin</code>，然后回车</li></ol><p>事实上，通过 VS Code 配置远程仓库并不比直接使用命令行更简单。但是，你可以通过这一图形化界面来查看和管理已有的远程。</p><h3 id="与已添加的远程仓库同步" tabindex="-1"><a class="header-anchor" href="#与已添加的远程仓库同步"><span>与已添加的远程仓库同步</span></a></h3><p>在应用的左下角有一个同步按钮，用于与远程仓库进行同步。</p><p>如果这是你第一次将本地文件与远程同步，这个按钮会显示为“发布”。</p><h3 id="冲突管理" tabindex="-1"><a class="header-anchor" href="#冲突管理"><span>冲突管理</span></a></h3><p>对于代码 <code>a = 1 / 10</code>，我们同时执行了如下操作：</p><ul><li>在 GitHub 网页上将其修改为 <code>a = 1 / 100</code> 并提交</li><li>在 VS Code 中将其修改为 <code>a = 1 / 1000</code> 并提交</li></ul><p>此时再点击同步按钮，我们将看到如下内容：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy" width="2560" height="1528"><figcaption></figcaption></figure><p>这一现象在多人协作中是很常见的。当两个人同时基于一个历史版本，对同一个文件的同一部分进行修改时，Git 不知道该保留哪一个版本。此时需要我们手动处理冲突。</p><p>如上图所示，VS Code 给了我们“采用当前更改”、“采用传入的更改”、“保留双方更改”等选项。我们可以选择其中之一，然后文件会像下图这样“恢复正常”，进而让我们进一步手动修改。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy" width="1200" height="666"><figcaption></figcaption></figure><p>当修改完成后，按上图箭头所示暂存更改、正常提交并再次尝试同步即可。</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy" width="910" height="485"><figcaption></figcaption></figure><p>此时你将会看到有两个更改待上传。请不要紧张，这分别是<mark>你原本要同步的提交</mark>和<mark>合并冲突产生的新提交</mark>。</p>',44)])])}const y=t(x,[["render",u]]),b=JSON.parse('{"path":"/git/zzeqw9x5/","title":"在 VS Code 中使用 Git","lang":"zh-CN","frontmatter":{"title":"在 VS Code 中使用 Git","createTime":"2025/10/21 17:05:37","permalink":"/git/zzeqw9x5/","description":"在绝大多数情况下，我们并不会直接在命令行工具中使用 Git。本节我们将以 VS Code 为例，来演示如何使用图形化界面来进行 Git 管理。 本节内容假定你已经掌握了 VS Code 的基本使用方法。如果没有，请先阅读 xxxx。 初始化存储库（init） 使用 VS Code 打开一个文件夹，并按照如图所示打开“源代码管理”菜单。如果你没有在该文件...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"在 VS Code 中使用 Git\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-21T14:09:29.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.yxzl.dev/git/zzeqw9x5/"}],["meta",{"property":"og:site_name","content":"技术文档"}],["meta",{"property":"og:title","content":"在 VS Code 中使用 Git"}],["meta",{"property":"og:description","content":"在绝大多数情况下，我们并不会直接在命令行工具中使用 Git。本节我们将以 VS Code 为例，来演示如何使用图形化界面来进行 Git 管理。 本节内容假定你已经掌握了 VS Code 的基本使用方法。如果没有，请先阅读 xxxx。 初始化存储库（init） 使用 VS Code 打开一个文件夹，并按照如图所示打开“源代码管理”菜单。如果你没有在该文件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-21T14:09:29.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-21T14:09:29.000Z"}]]},"readingTime":{"minutes":3.42,"words":1027},"git":{"createdTime":1761055769000,"updatedTime":1761055769000,"contributors":[{"name":"yxzlwz","username":"yxzlwz","email":"yxzlwz@gmail.com","commits":1,"avatar":"https://avatars.githubusercontent.com/yxzlwz?v=4","url":"https://github.com/yxzlwz"}],"changelog":[{"hash":"f53414e25aa3c1ca1cd51a63c136f6148fe15bfc","time":1761055769000,"email":"yxzlwz@gmail.com","author":"yxzlwz","message":"[update]"}]},"autoDesc":true,"filePathRelative":"git/git-with-vscode.md","headers":[]}');export{y as comp,b as data};
